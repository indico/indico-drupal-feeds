<?php
include_once('indico_feeds.features.inc');

function indico_feeds_enable() {
    // Enable all indico importers (in case some already exist).
    $disabled = array();
    foreach(feeds_importer_load_all(true) as $importer) {
        $disabled[$importer->id] = _indico_feeds_is_indico_importer($importer) ? false : $importer->disabled;
    }
    variable_set('default_feeds_importer', $disabled);
    feeds_cache_clear();

    // Clear all caches and tell users what to do next
    drupal_flush_all_caches();
    drupal_set_message(t('To use the <em>Indico Feeds</em> module, first go to the <a href="@url">Indico Feed Administration</a> to set some general options.', array('@url' => url('admin/structure/feeds/indico/settings/IndicoFetcher'))));
}

function indico_feeds_disable() {
    // Disable all indico importers
    $disabled = array();
    foreach(feeds_importer_load_all(true) as $importer) {
        $disabled[$importer->id] = _indico_feeds_is_indico_importer($importer) ? true : $importer->disabled;
    }
    variable_set('default_feeds_importer', $disabled);
    feeds_cache_clear();

    // Clear all caches just to be safe
    drupal_flush_all_caches();
}

function _indico_feeds_is_indico_importer($importer) {
    $cfg = $importer->getConfig();
    return ($cfg['fetcher']['plugin_key'] == 'IndicoFetcher' || $cfg['parser']['plugin_key'] == 'IndicoParser');
}

function indico_feeds_node_insert($node) {
    if(!($id = feeds_get_importer_id($node->type)) || !($importer = feeds_importer($id)) || !_indico_feeds_is_indico_importer($importer)) {
        return;
    }

    _indico_feeds_create_blocks($node, $importer);
}

function _indico_feeds_create_blocks($node, $importer, $new = true) {
    $createdView = false;
    foreach(array('indico_events_block', 'indico_events_block_with_details') as $view_name) {
        $view = views_get_view($view_name, true);
        if(isset($view->display['block_feed_' . $node->nid])) {
            continue;
        }
        $handler = $view->new_display('block', 'Feed block: ' . $node->title, 'block_feed_' . $node->nid);
        $handler->display->display_options['defaults']['title'] = false;
        $handler->display->display_options['title'] = $node->title;
        $handler->display->display_options['defaults']['filters'] = false;
        $handler->display->display_options['filters']['type']['id'] = 'type';
        $handler->display->display_options['filters']['type']['table'] = 'node';
        $handler->display->display_options['filters']['type']['field'] = 'type';
        $handler->display->display_options['filters']['type']['value'] = array(
            'indico_event' => 'indico_event',
        );
        $handler->display->display_options['filters']['feed_nid']['id'] = 'feed_nid';
        $handler->display->display_options['filters']['feed_nid']['table'] = 'feeds_item';
        $handler->display->display_options['filters']['feed_nid']['field'] = 'feed_nid';
        $handler->display->display_options['filters']['feed_nid']['value']['value'] = $node->nid;
        $view->save();
        $createdView = true;
    }
    if(!$createdView) {
        return;
    }
    if($new) {
        drupal_set_message(t('Blocks displaying events from your feed have been automatically created. You may enable them on the <em>Structure &raquo; Blocks</em> page.'));
        // Clear various caches
        menu_rebuild();
        cache_clear_all('*', 'cache_views');
        cache_clear_all();
        ctools_include('object-cache');
        ctools_object_cache_clear('view', $view->name);
    }
    else {
        drupal_set_message(t('A missing block related to this feed has been automatically recreated.'));
    }
}

function indico_feeds_node_update($node) {
    if(!($id = feeds_get_importer_id($node->type)) || !($importer = feeds_importer($id)) || !_indico_feeds_is_indico_importer($importer)) {
        return;
    }

    $missing = false;
    foreach(array('indico_events_block', 'indico_events_block_with_details') as $view_name) {
        $view = views_get_view($view_name, true);
        if(isset($view->display['block_feed_' . $node->nid])) {
            $display = $view->display['block_feed_' . $node->nid];
            $display->display_title = 'Feed block: ' . $node->title;
            $display->display_options['title'] = $node->title;
        }
        else {
            // Create block if it was missing for some reason
            $missing = true;
        }
        $view->save();
    }
    if($missing) {
        _indico_feeds_create_blocks($node, $importer, false);
    }
    // Clear various caches
    menu_rebuild();
    cache_clear_all('*', 'cache_views');
    cache_clear_all();
    ctools_include('object-cache');
    ctools_object_cache_clear('view', $view->name);
}

function indico_feeds_node_delete($node) {
    return; // currently DISABLED - see http://drupal.org/node/1065942
    if(!($id = feeds_get_importer_id($node->type)) || !($importer = feeds_importer($id)) || !_indico_feeds_is_indico_importer($importer)) {
        return;
    }

    $deleted = false;
    foreach(array('indico_events_block', 'indico_events_block_with_details') as $view_name) {
        $view = views_get_view($view_name, true);
        if(isset($view->display['block_feed_' . $node->nid])) {
            unset($view->display['block_feed_' . $node->nid]);
            $deleted = true;
            $view->save();
        }
    }
    if($deleted) {
        // Clear various caches
        menu_rebuild();
        cache_clear_all('*', 'cache_views');
        cache_clear_all();
        ctools_include('object-cache');
        ctools_object_cache_clear('view', $view->name);
    }
}

function indico_feeds_help($path, $arg) {
    switch ($path) {
    case 'admin/help#indico_feeds':
        $output = '';
        $output .= '<h3>' . t('Indico Feeds') . '</h3>';
        $output .= '<p>' . t('This module allows you to import events from Indico. To use it, create a key pair in Indico via <em>My Profile / HTTP API</em>. Then go to the <a href="@fetcher">Indico Fetcher settings</a> and enter your key pair.', array('@fetcher' => url('admin/structure/feeds/edit/indico/settings/IndicoFetcher'))) . '</p>';
        $output .= '<p>' . t('To actually import data from indico, <a href="@feed">create a new <em>Indico Feed</em> content node</a> and enter the requested infomation. To find out the ID of a category, open it in Indico and copy the numeric value next to <em>/category/</em> from the URL.', array('@feed' => url('node/add/indico-feed'))) . '</p>';
        return $output;
    }
}

function indico_feeds_feeds_plugins() {
    $info = array();
    $info['IndicoFetcher'] = array(
        'name' => 'Indico Fetcher',
        'description' => 'Fetches indico events.',
        'help' => 'This fetcher retrieves events from Indico.',
        'handler' => array(
            'parent' => 'FeedsFetcher',
            'class' => 'IndicoFetcher',
            'file' => 'indico_feeds.inc',
            'path' => drupal_get_path('module', 'indico_feeds'),
        ),
    );
    $info['IndicoParser'] = array(
        'name' => 'Indico Parser',
        'description' => 'Parses indico events.',
        'help' => 'This parser parses the JSON returned by Indico.',
        'handler' => array(
            'parent' => 'FeedsParser',
            'class' => 'IndicoParser',
            'file' => 'indico_feeds.inc',
            'path' => drupal_get_path('module', 'indico_feeds'),
        ),
    );
    return $info;
}

function indico_feeds_date_format_types() {
    return array(
        'indico_feeds_event_time' => t('Short event time'),
    );
}

function indico_feeds_date_formats() {
    return array(
        array(
            'type' => 'indico_feeds_event_time',
            'format' => 'H:i',
        ),
        array(
            'type' => 'indico_feeds_event_time',
            'format' => 'g:ia',
        ),
    );
}

// rewrites indico events urls from node/<nid> to node/<nid>/indico-events
function indico_feeds_url_outbound_alter(&$path, &$options, $original_path) {
    if(preg_match('#^node/([0-9]*)$#', $path, $matches)) {
        $nodefeed = node_load($matches[1]);
        if($nodefeed && $nodefeed->type == 'indico_feed') {
            $path .= '/indico-events';
        }
    }
}

// hides 'View' tabs
function indico_feeds_preprocess_page(&$vars, $hook) {
    // these conditions could need some review (seem to work now -Adrian)
    if ((isset($vars['node']) && ($vars['node']->type == 'indico_feed')) || (isset($vars['tabs']['#primary']) && is_array($vars['tabs']['#primary']) && isset($vars['tabs']['#primary'][1]['#link']['path']) && ($vars['tabs']['#primary'][1]['#link']['path'] == 'node/%/indico-events'))) {
        _indico_feeds_removetab('View', $vars);
    }
}

// Remove undesired local task tabs.
function _indico_feeds_removetab($label, &$vars) {
    // Remove from primary tabs
    $i = 0;
    if(is_array($vars['tabs']['#primary'])) {
        foreach($vars['tabs']['#primary'] as $primary_tab) {
            if($primary_tab['#link']['title'] == $label) {
                unset($vars['tabs']['#primary'][$i]);
            }
            $i++;
        }
    }
    // Remove from secondary tabs
    $i = 0;
    if(is_array($vars['tabs']['#secondary'])) {
        foreach($vars['tabs']['#secondary'] as $secondary_tab) {
            if($secondary_tab['#link']['title'] == $label) {
                unset($vars['tabs']['#secondary'][$i]);
            }
            $i++;
        }
    }
}


